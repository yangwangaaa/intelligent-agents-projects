<?xml version="1.0" encoding="UTF-8"?>
<section name="Workbench">
	<section name="org.eclipse.ui.texteditor.FindReplaceDialog">
		<item value="false" key="isRegEx"/>
		<item value="updateBestBid1" key="selection"/>
		<item value="true" key="casesensitive"/>
		<item value="false" key="incremental"/>
		<item value="true" key="wrap"/>
		<item value="false" key="wholeword"/>
		<list key="findhistory">
			<item value="updateBestBid1"/>
			<item value="margicost"/>
			<item value="tableBestMc2"/>
			<item value="strategies"/>
			<item value="auctionResult"/>
			<item value="updateStrategies"/>
			<item value="findBestStrategy"/>
			<item value="findBestConfiguration"/>
		</list>
		<list key="replacehistory">
			<item value="proposed"/>
			<item value="nA"/>
			<item value="MyVehicle"/>
			<item value="package agens;&#x0A;&#x0A;//the list of imports&#x0A;import java.util.ArrayList;&#x0A;import java.util.List;&#x0A;import java.util.Random;&#x0A;&#x0A;import logist.LogistSettings;&#x0A;import logist.agent.Agent;&#x0A;import logist.behavior.AuctionBehavior;&#x0A;import logist.config.Parsers;&#x0A;import logist.plan.Plan;&#x0A;import logist.simulation.Vehicle;&#x0A;import logist.task.Task;&#x0A;import logist.task.TaskDistribution;&#x0A;import logist.task.TaskSet;&#x0A;import logist.topology.Topology;&#x0A;import logist.topology.Topology.City;&#x0A;import other.MyVehicle;&#x0A;import sls.NodePD;&#x0A;import sls.SLS;&#x0A;import astar.Astar;&#x0A;&#x0A;/**&#x0A; * QUESTION :&#x0A; * do we know the map? one of the given maps? don&apos;t know&#x0A; * total capacity always the same? +- meme capacity sum&#x0A; * cb de tasks en moyenne, upper bound lower bound? cas particuliers avec genre 1 seule task? ask other TA&#x0A; * cb de vehicles en moyenne? +- meme nombre&#x0A; * test agents fournis?&#x0A; * comment trouver agent size?&#x0A; * &#x0A; * TODO : (see also SLS)&#x0A; * test all collected info&#x0A; * estimate others marginal cost : &#x0A; * - generate i-1, i and finally i+1 vehicles, with same total capacity, average on 3 random start city&#x0A; */&#x0A;@SuppressWarnings(&quot;unused&quot;)&#x0A;public class AuctionAgent3 implements AuctionBehavior {&#x0A;&#x0A;&#x09;private Topology topology;&#x0A;&#x09;private TaskDistribution distribution;&#x0A;&#x09;private Agent agent;&#x0A;&#x09;private Random random;&#x0A;&#x09;private MyVehicle biggestVehicle;&#x0A;&#x0A;&#x09;private long timeout_setup;&#x0A;&#x09;private long timeout_plan;&#x0A;&#x09;private long time_start;&#x0A;&#x09;private long timeout_bid;&#x0A;&#x0A;&#x09;private List&lt;MyVehicle&gt; vehiclesList; &#x0A;&#x09;private Task[] tasks;&#x0A;&#x0A;&#x09;private int Nt;&#x0A;&#x09;private int Nv;&#x0A;&#x09;private int Na;&#x0A;&#x0A;&#x09;private double p = 0.5; // probability used for localChoice&#x0A;&#x09;private int numIt = 5000;&#x0A;&#x09;private int n = 5;&#x0A;&#x09;private Random rand;&#x0A;&#x09;private int firstV = 7;&#x0A;&#x09;private int lastV = 10;&#x0A;&#x0A;&#x0A;&#x09;private int id;&#x0A;&#x09;private int totalTasks = 0;&#x0A;&#x09;private long[] totalReward;&#x0A;&#x09;private int[] meanBid;&#x0A;&#x09;private int numA = -1;&#x0A;&#x09;private ArrayList&lt;Long&gt;[] allBids = null;&#x0A;&#x09;private NodePD[] lastSolutions = null;&#x0A;&#x09;private NodePD lastSolution = null;&#x0A;&#x09;private NodePD[] bestSolutions = null;&#x0A;&#x09;private ArrayList&lt;Task&gt;[] listTasks = null;&#x0A;&#x09;private int[] marginalCosts = null;&#x0A;&#x0A;&#x09;private SLS sls;&#x0A;&#x09;private Astar astar;&#x0A;&#x0A;&#x09;//////////////////////////////////////&#x0A;&#x09;//              MAIN                //&#x0A;&#x09;//////////////////////////////////////&#x0A;&#x0A;&#x09;@Override&#x0A;&#x09;public void setup(Topology topology, TaskDistribution distribution,&#x0A;&#x09;&#x09;&#x09;Agent agent) {&#x0A;&#x0A;&#x09;&#x09;this.topology = topology;&#x0A;&#x09;&#x09;this.distribution = distribution;&#x0A;&#x09;&#x09;this.agent = agent;&#x0A;&#x09;&#x09;this.vehiclesList = MyVehicle.transform(agent.vehicles());&#x0A;&#x09;&#x09;this.biggestVehicle = vehiclesList.get(0);&#x0A;&#x09;&#x09;for (MyVehicle v : vehiclesList) {&#x0A;&#x09;&#x09;&#x09;if(v.capacity() &gt; biggestVehicle.capacity()) biggestVehicle = v;&#x0A;&#x09;&#x09;}&#x0A;&#x0A;&#x0A;&#x09;&#x09;long seed = -9019554669489983951L * biggestVehicle.hashCode() * agent.id();&#x0A;&#x09;&#x09;this.random = new Random(seed);&#x0A;&#x0A;&#x09;&#x09;// this code is used to get the timeouts&#x0A;&#x09;&#x09;LogistSettings ls = null;&#x0A;&#x09;&#x09;try {&#x0A;&#x09;&#x09;&#x09;ls = Parsers.parseSettings(&quot;config/settings_default.xml&quot;);&#x0A;&#x09;&#x09;}&#x0A;&#x09;&#x09;catch (Exception exc) {&#x0A;&#x09;&#x09;&#x09;System.out.println(&quot;There was a problem loading the configuration file.&quot;);&#x0A;&#x09;&#x09;}&#x0A;&#x0A;&#x09;&#x09;// the setup method cannot last more than timeout_setup milliseconds&#x0A;&#x09;&#x09;timeout_setup = ls.get(LogistSettings.TimeoutKey.SETUP);&#x0A;&#x09;&#x09;// the plan method cannot execute more than timeout_plan milliseconds&#x0A;&#x09;&#x09;timeout_plan = ls.get(LogistSettings.TimeoutKey.PLAN);&#x0A;&#x0A;&#x09;&#x09;timeout_bid = ls.get(LogistSettings.TimeoutKey.BID);&#x0A;&#x0A;&#x09;&#x09;// int numA = ls.get(LogistSettings.SizeKey.NUMBER_OF_AGENTS);&#x0A;&#x09;&#x09;// int numT = ls.get(LogistSettings.SizeKey.NUMBER_OF_TASKS);&#x0A;&#x09;&#x09;//print(&quot;number of tasks = &quot; + numT + &quot; and number of agents = &quot; + numA);&#x0A;&#x0A;&#x09;&#x09;rand = new Random();&#x0A;&#x0A;&#x09;&#x09;id = agent.id();&#x0A;&#x0A;&#x09;&#x09;sls = new SLS(topology, distribution, agent);&#x0A;&#x09;&#x09;astar = new Astar(topology, distribution, agent);&#x0A;&#x09;}&#x0A;&#x0A;&#x09;//////////////////////////////////////&#x0A;&#x09;//             BIDING              //&#x0A;&#x09;//////////////////////////////////////&#x0A;&#x0A;&#x09;@Override&#x0A;&#x09;public void auctionResult(Task previous, int winner, Long[] bids) {&#x0A;&#x09;&#x09;updateStuctures(previous, winner, bids);&#x0A;&#x09;}&#x0A;&#x0A;&#x09;@Override&#x0A;&#x09;public Long askPrice(Task task) {&#x0A;&#x09;&#x09;if (biggestVehicle.capacity() &lt; task.weight) {&#x0A;&#x09;&#x09;&#x09;return null;&#x0A;&#x09;&#x09;}&#x0A;&#x09;&#x09;totalTasks++;&#x0A;&#x09;&#x09;if(numA==-1) {&#x0A;&#x09;&#x09;&#x09;ArrayList&lt;Task&gt; newTasks = new ArrayList&lt;Task&gt;();&#x0A;&#x09;&#x09;&#x09;newTasks.add(task);&#x0A;&#x09;&#x09;&#x09;lastSolution = sls.RunSLS(vehiclesList, newTasks.toArray(new Task[newTasks.size()]), timeout_bid, null);&#x0A;&#x0A;&#x0A;&#x09;&#x09;&#x09;double marginalCost = lastSolution.getOValue();&#x0A;&#x0A;&#x09;&#x09;&#x09;double ratio = 1.0 + (random.nextDouble() * 0.05 * task.id);&#x0A;&#x09;&#x09;&#x09;double bid = ratio * marginalCost;&#x0A;&#x0A;&#x09;&#x09;&#x09;print(&quot;AGENT 2 : BIDDING TASK &quot; + task.id + &quot;, Bid = &quot; + Math.round(bid));&#x0A;&#x09;&#x09;&#x09;return (long) Math.round(bid);&#x0A;&#x09;&#x09;}&#x0A;&#x09;&#x09;else {&#x0A;&#x09;&#x09;&#x09;ArrayList&lt;Task&gt; newTasks;&#x0A;&#x09;&#x09;&#x09;newTasks = (ArrayList&lt;Task&gt;) listTasks[id].clone();&#x0A;&#x09;&#x09;&#x09;newTasks.add(task);&#x0A;&#x09;&#x09;&#x09;NodePD npd = bestSolutions[id];&#x0A;&#x09;&#x09;&#x09;&#x09;&#x0A;&#x09;&#x09;&#x09;lastSolutions[id] = sls.RunSLS(vehiclesList, newTasks.toArray(new Task[newTasks.size()]), timeout_bid, npd);&#x0A;&#x0A;&#x09;&#x09;&#x09;double marginalCost = lastSolutions[id].getOValue() - bestSolutions[id].getOValue();&#x0A;&#x0A;&#x09;&#x09;&#x09;double ratio = 1.0 + (random.nextDouble() * 0.05 * task.id);&#x0A;&#x09;&#x09;&#x09;double bid = ratio * marginalCost;&#x0A;&#x0A;&#x09;&#x09;&#x09;print(&quot;AGENT 2 : BIDDING TASK &quot; + task.id + &quot;, Bid = &quot; + Math.round(bid));&#x0A;&#x09;&#x09;&#x09;return (long) Math.round(bid);&#x0A;&#x09;&#x09;}&#x0A;&#x09;}&#x0A;&#x09;&#x0A;&#x09;private void computeMarginalCost(Task task) {&#x0A;&#x09;&#x09;for(int i=0; i&lt;numA; i++) {&#x0A;&#x09;&#x09;&#x09;ArrayList&lt;Task&gt; tasks = listTasks[i];&#x0A;&#x09;&#x09;&#x09;tasks.add(task);&#x0A;&#x09;&#x09;&#x09;List&lt;MyVehicle&gt; vl = generateRandomVehicles();&#x0A;&#x09;&#x09;&#x09;lastSolutions[i] = sls.RunSLS(vl, tasks.toArray(new Task[tasks.size()]), timeout_bid, null);&#x0A;&#x09;&#x09;}&#x0A;&#x09;}&#x0A;&#x09;&#x0A;&#x09;private void computeBiding() {&#x0A;&#x09;&#x09;&#x0A;&#x09;}&#x0A;&#x09;&#x0A;&#x09;private List&lt;MyVehicle&gt; generateRandomVehicles() {&#x0A;&#x09;&#x09;/** parameters to handle :&#x0A;&#x09;&#x09; * - number of vehicles = same&#x0A;&#x09;&#x09; * - costPerKm = same&#x0A;&#x09;&#x09; * - home city = random&#x0A;&#x09;&#x09; * - capacity = same total capacity&#x0A;&#x09;&#x09; * - tasks : already acquired tasks + new task&#x0A;&#x09;&#x09; * - &#x0A;&#x09;&#x09; */&#x0A;&#x09;&#x09;&#x0A;&#x09;&#x09;List&lt;MyVehicle&gt; vl = new ArrayList&lt;MyVehicle&gt;();&#x0A;&#x09;&#x09;for(MyVehicle v : vehiclesList) {&#x0A;&#x09;&#x09;&#x09;//MyVehicle randV = new MyVehicle();&#x0A;&#x09;&#x09;}&#x0A;&#x09;&#x09;return vl;&#x0A;&#x09;}&#x0A;&#x0A;&#x09;//////////////////////////////////////&#x0A;&#x09;//             PLANNING             //&#x0A;&#x09;//////////////////////////////////////&#x0A;&#x0A;&#x09;@Override&#x0A;&#x09;public List&lt;Plan&gt; plan(List&lt;Vehicle&gt; vcls, TaskSet tasksSet) {&#x0A;&#x0A;&#x09;&#x09;print(&quot;SLS Agent2 for &quot; + tasksSet.size() +  &quot; tasks&quot;);&#x0A;&#x09;&#x09;System.out.println(&quot;Agent &quot; + agent.id() + &quot; has tasks &quot; + tasks);&#x0A;&#x09;&#x09;&#x0A;&#x09;&#x09;if(vcls.size()==0) {&#x0A;&#x09;&#x09;&#x09;List&lt;Plan&gt; plans = new ArrayList&lt;Plan&gt;();&#x0A;&#x09;&#x09;&#x09;return plans;&#x0A;&#x09;&#x09;}&#x0A;&#x09;&#x09;&#x0A;&#x09;&#x09;List&lt;MyVehicle&gt; vehicles = MyVehicle.transform(vcls);&#x0A;&#x0A;&#x0A;&#x09;&#x09;time_start = System.currentTimeMillis();&#x0A;&#x09;&#x09;this.vehiclesList = vehicles;&#x0A;&#x09;&#x09;this.tasks = tasksSet.toArray(new Task[tasksSet.size()]);&#x0A;&#x09;&#x09;this.Nt = this.tasks.length;&#x0A;&#x09;&#x09;this.Nv = vehiclesList.size();&#x0A;&#x09;&#x09;this.Na = 2*Nt;&#x0A;&#x09;&#x09;List&lt;Plan&gt; plans;&#x0A;&#x0A;&#x09;&#x09;if(tasksSet.size() == 0) {&#x0A;&#x09;&#x09;&#x09;print(&quot;TASKS SIZE == 0&quot;);&#x0A;&#x0A;&#x09;&#x09;&#x09;plans = new ArrayList&lt;Plan&gt;();&#x0A;&#x0A;&#x09;&#x09;&#x09;for(int v = 0 ; v&lt;Nv ; v++){ // for each vehicle&#x0A;&#x09;&#x09;&#x09;&#x09;City current = vehiclesList.get(v).getCurrentCity();&#x0A;&#x09;&#x09;&#x09;&#x09;Plan plan = new Plan(current);&#x0A;&#x0A;&#x09;&#x09;&#x09;&#x09;plans.add(plan);&#x0A;&#x09;&#x09;&#x09;}&#x0A;&#x09;&#x09;&#x09;return plans;&#x0A;&#x09;&#x09;}&#x0A;&#x0A;&#x0A;&#x09;&#x09;bestSolutions[id] = sls.RunSLS(vehicles, tasks, timeout_plan, bestSolutions[id]);&#x0A;&#x0A;&#x09;&#x09;plans = sls.computeFinalPlan(bestSolutions[id]);&#x0A;&#x0A;&#x0A;&#x09;&#x09;long time_end = System.currentTimeMillis();&#x0A;&#x09;&#x09;long duration = time_end - time_start;&#x0A;&#x09;&#x09;System.out.println(&quot;The plan was generated in &quot;+duration+&quot; milliseconds.&quot;);&#x0A;&#x0A;&#x09;&#x09;int totalCost = 0;&#x0A;&#x09;&#x09;int totalDist = 0;&#x0A;&#x09;&#x09;int v = 0;&#x0A;&#x09;&#x09;for (Plan plan : plans) {&#x0A;&#x09;&#x09;&#x09;totalDist+=plan.totalDistance();&#x0A;&#x09;&#x09;&#x09;totalCost+=plan.totalDistance()*vehicles.get(v).costPerKm();&#x0A;&#x09;&#x09;&#x09;v++;&#x0A;&#x09;&#x09;}&#x0A;&#x0A;&#x09;&#x09;//print(&quot;MEAN BID = &quot; + meanBid[id]/allBids[id].size());&#x0A;&#x09;&#x09;print(&quot;Bids : &quot;);&#x0A;&#x09;&#x09;int c = 0;&#x0A;&#x09;&#x09;for(ArrayList&lt;Long&gt; bids : allBids) {&#x0A;&#x09;&#x09;&#x09;System.out.print(&quot;Agent &quot; + c + &quot;:&quot;);&#x0A;&#x09;&#x09;&#x09;for(Long bid : bids) {&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.print(&quot;  &quot; + bid);&#x0A;&#x09;&#x09;&#x09;}&#x0A;&#x09;&#x09;&#x09;System.out.println(&quot;&quot;);&#x0A;&#x09;&#x09;&#x09;c++;&#x0A;&#x09;&#x09;}&#x0A;&#x0A;&#x09;&#x09;print(&quot;FINAL DISTANCE = &quot; + totalDist);&#x0A;&#x09;&#x09;print(&quot;FINAL COST2 = &quot; + bestSolutions[id].getOValue());&#x0A;&#x09;&#x09;print(&quot;FINAL REWARD = &quot; + tasksSet.rewardSum());&#x0A;&#x09;&#x09;print(&quot;FINAL PROFIT = &quot; + (tasksSet.rewardSum()-totalCost));&#x0A;&#x0A;&#x09;&#x09;return plans;&#x0A;&#x09;}&#x0A;&#x09;&#x0A;&#x09;//////////////////////////////////////&#x0A;&#x09;//              OTHERS              //&#x0A;&#x09;//////////////////////////////////////&#x0A;&#x0A;&#x09;private void updateStuctures(Task previous, int winner, Long[] bids) {&#x0A;&#x09;&#x09;if (numA==-1) {&#x0A;&#x09;&#x09;&#x09;numA = bids.length;&#x0A;&#x09;&#x09;&#x09;marginalCosts = new int[numA];&#x0A;&#x09;&#x09;&#x09;lastSolutions = new NodePD[numA];&#x0A;&#x09;&#x09;&#x09;lastSolutions[id] = lastSolution;&#x0A;&#x09;&#x09;&#x09;bestSolutions = new NodePD[numA];&#x0A;&#x09;&#x09;&#x09;totalReward = new long[numA];&#x0A;&#x09;&#x09;&#x09;listTasks = (ArrayList&lt;Task&gt;[]) new ArrayList[numA];&#x0A;&#x09;&#x09;&#x09;allBids = (ArrayList&lt;Long&gt;[]) new ArrayList[numA];&#x0A;&#x09;&#x09;&#x09;for(int i=0; i&lt;numA; i++) {&#x0A;&#x09;&#x09;&#x09;&#x09;listTasks[i] = new ArrayList&lt;Task&gt;();&#x0A;&#x09;&#x09;&#x09;&#x09;allBids[i] = new ArrayList&lt;Long&gt;();&#x0A;&#x09;&#x09;&#x09;}&#x0A;&#x09;&#x09;}&#x0A;&#x0A;&#x09;&#x09;for(int i=0; i&lt;numA; i++) {&#x0A;&#x09;&#x09;&#x09;allBids[i].add(bids[i]);&#x0A;&#x09;&#x09;}&#x0A;&#x0A;&#x0A;&#x09;&#x09;totalReward[winner] += bids[winner];&#x0A;&#x09;&#x09;listTasks[winner].add(previous);&#x0A;&#x09;&#x09;bestSolutions[winner] = lastSolutions[winner];&#x0A;&#x09;}&#x0A;&#x0A;&#x09;//////////////////////////////////////&#x0A;&#x09;//              UTILS               //&#x0A;&#x09;//////////////////////////////////////&#x0A;&#x0A;&#x09;public void print(String s){&#x0A;&#x09;&#x09;System.out.println(s);&#x0A;&#x09;}&#x0A;}&#x0A;"/>
			<item value="Action"/>
			<item value="NodePD"/>
			<item value="NodeT"/>
			<item value="task"/>
		</list>
	</section>
	<section name="org.eclipse.ui.texteditor.FindReplaceDialog_dialogBounds">
		<item value="265" key="DIALOG_WIDTH"/>
		<item value="1|.SF NS Text|11.0|0|COCOA|1|.SFNSText-Regular" key="DIALOG_FONT_NAME"/>
		<item value="399" key="DIALOG_HEIGHT"/>
		<item value="962" key="DIALOG_X_ORIGIN"/>
		<item value="495" key="DIALOG_Y_ORIGIN"/>
	</section>
</section>
