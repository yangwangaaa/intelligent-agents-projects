package template;

//the list of imports
import java.util.ArrayList;
import java.util.List;

import logist.LogistSettings;
import logist.agent.Agent;
import logist.behavior.CentralizedBehavior;
import logist.config.Parsers;
import logist.plan.Plan;
import logist.simulation.Vehicle;
import logist.task.TaskDistribution;
import logist.task.TaskSet;
import logist.topology.Topology;

/**
 * A very simple auction agent that assigns all tasks to its first vehicle and
 * handles them sequentially.
 *
 */
@SuppressWarnings("unused")
public class CentralizedOneTask implements CentralizedBehavior {

    private Topology topology;
    private TaskDistribution distribution;
    private Agent agent;
    private long timeout_setup;
    private long timeout_plan;
    
    private List<Vehicle> vehiclesList; 
    private TaskSet tasks;
    
    
    //////////////////////////////////////
    //              MAIN                //
    //////////////////////////////////////
    
    @Override
    public void setup(Topology topology, TaskDistribution distribution,
            Agent agent) {
        
        // this code is used to get the timeouts
        LogistSettings ls = null;
        try {
            ls = Parsers.parseSettings("config/settings_default.xml");
        }
        catch (Exception exc) {
            System.out.println("There was a problem loading the configuration file.");
        }
        
        // the setup method cannot last more than timeout_setup milliseconds
        timeout_setup = ls.get(LogistSettings.TimeoutKey.SETUP);
        // the plan method cannot execute more than timeout_plan milliseconds
        timeout_plan = ls.get(LogistSettings.TimeoutKey.PLAN);
        
        this.topology = topology;
        this.distribution = distribution;
        this.agent = agent;
    }

    @Override
    public List<Plan> plan(List<Vehicle> vehicles, TaskSet tasks) {
        long time_start = System.currentTimeMillis();
        this.vehiclesList = vehicles;
        this.tasks = tasks;
        
        
        
//		System.out.println("Agent " + agent.id() + " has tasks " + tasks);
        NodeT bestSolution = SLS();
        List<Plan> plans = computeFinalPlan(bestSolution);
        
        
        
        long time_end = System.currentTimeMillis();
        long duration = time_end - time_start;
        System.out.println("The plan was generated in "+duration+" milliseconds.");
        
        return plans;
    }
    
    
    //////////////////////////////////////
    //               SLS                //
    //////////////////////////////////////
    
    private NodeT SLS() {
    	NodeT A = selectInitialSolution();
    	NodeT bestNodeT = null;
    	
    	int numIt = 5000;
    	int i = 0;
    	while(i < numIt) { // TODO
    		NodeT Aold = A;
    		ArrayList<NodeT> N = chooseNeighbours(A);
    		A = localChoice(N, Aold); // only keep bestNodeT in chooseNeighbours : more efficient? = rename "chooseBestNeigbours"
    		if(A.getOValue() < bestNodeT.getOValue()) bestNodeT = A;
    		i++;
    	}
    	
    	return bestNodeT;
    }
    
    //////////////////////////////////////
    //         SLS : NEIGHBOURS         //
    //////////////////////////////////////
    
    // vladman
    private ArrayList<NodeT> chooseNeighbours(NodeT Aold) {
    	ArrayList<NodeT> N = new ArrayList<NodeT>();
    	
    	return N;
    }
    
    // vladman
    private void changingVehicle(NodeT A, int v1, int v2, ArrayList<NodeT> neighbours) {
    	
    }
    
    // mouche
    private void changingTaskOrder(NodeT A, int v, int aI1, int aI2, ArrayList<NodeT> neighbours) {
    	
    }
    
    // mouche
    private void updateTime(NodeT A, int v) {
    	
    }
    
    //////////////////////////////////////
    //           SLS : OTHERS           //
    //////////////////////////////////////
    
    // vladman
    private NodeT selectInitialSolution() {
    	// use global variables: vehicles, tasks, ...
    	NodeT initial = null;
    	int Nt = tasks.size();
    	int Nv = vehiclesList.size();
    	int[] nextTask = new int[Nv+Nt];
    	int[] times = new int[Nt];
    	int[] vehicles = new int[Nt];
    	
    	Arrays.fill(array, null);
    	
    	Vehicle biggestV = vehiclesList.get(0);
    	for (Vehicle v : vehiclesList) {
    		if(biggestV.capacity()<v.capacity()) biggestV = v;
    	}
    	
    	int index = biggestV.id();
    	nextTask
    	
    	return initial;
    	
    }
    
    // mouche
    private NodeT localChoice(ArrayList<NodeT> N, NodeT Aold) {
    	NodeT bestNodeT = null;
    	
    	return bestNodeT;
    }
    
    // mouche
    private List<Plan> computeFinalPlan(NodeT n) {
    	List<Plan> plans = new ArrayList<Plan>();
    	
    	return plans;
    }
    
    //////////////////////////////////////
    //              UTILS               //
    //////////////////////////////////////
}
