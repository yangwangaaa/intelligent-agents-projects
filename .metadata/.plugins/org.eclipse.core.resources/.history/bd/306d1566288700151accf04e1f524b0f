package template;

import java.util.Arrays;
import java.util.List;

import logist.simulation.Vehicle;
import logist.task.Task;
import logist.topology.Topology.City;

public class NodePD {
	private int[] nextAction;
	private int[] previousAction;
	private int[] times;
	private int[] vehicles;
	private int[] load;
	private double OValue;

	private int Nt;
	private int Nv;
	private int Na;

	///////////////////////////////
	//        CONSTRUCTORS       //
	///////////////////////////////

	public NodePD(List<Vehicle> vehiclesList, Task[] tasks) {
		this.Nt = tasks.length;
		this.Nv = vehiclesList.size();
		this.Na = 2*Nt;
		this.nextAction = new int[Nv+Na];
		this.previousAction = new int[Nv+Na];
		this.times = new int[Na];
		this.vehicles = new int[Na];
		Arrays.fill(this.nextAction, -1);
		Arrays.fill(this.previousAction, -1);
	}


	public NodePD(int[] nextTask, int[] previousTask, int[] times, int[] vehicles, int Nt, int Nv) {
		this.nextAction = nextTask;
		this.times = times;
		this.vehicles = vehicles;
		this.Nt = Nt;
		this.Nv = Nv;
		this.Na = 2*Nt;
		this.OValue = -1;
	}

	private NodePD(int[] nextTask, int[] times, int[] vehicles, int Nt, int Nv, double v) {
		this.nextAction = nextTask;
		this.times = times;
		this.vehicles = vehicles;
		this.Nt = Nt;
		this.Nv = Nv;
		this.Na = 2*Nt;
		this.OValue = v;
	}

	///////////////////////////////
	//           UTILS           //
	///////////////////////////////

	public NodePD clone() {
		return new NodePD((int[]) nextAction.clone(), (int[])times.clone(), (int[])vehicles.clone(), Nt, Nv, OValue);
	}


	public double getOValue(Task[] tasks, List<Vehicle> vehicles) {
		if (OValue == -1) return this.computeOValue(tasks, vehicles);
		else return OValue;
	}

	// vladman
	private double computeOValue(Task[] tasks, List<Vehicle> vehicles) {
		// objective function
		double C = 0;

		for (int t = 0; t<Nt; t++) {
			if (this.nextAction(t)!=-1) {
				Task t1 = tasks[t];
				Task t2 = tasks[this.nextAction(t)];
				Vehicle vehicle = vehicles.get(this.getVehicle(t));
				City delivery1 = t1.deliveryCity;
				City pickUp2 = t2.pickupCity;
				City delivery2 = t2.deliveryCity;
				C += ( delivery1.distanceTo(pickUp2) + pickUp2.distanceTo(delivery2) )*vehicle.costPerKm();
			}
		}


		for (int v = 0; v<Nv; v++) {
			if (this.nextAction(v+Nt)!=-1) {
				Task firstTask = tasks[this.nextAction(v+Nt)];
				Vehicle vehicle = vehicles.get(v);
				City vCity = vehicle.getCurrentCity();
				City pickUp = firstTask.pickupCity;
				City delivery = firstTask.deliveryCity;
				C += ( vCity.distanceTo(pickUp) + pickUp.distanceTo(delivery) )*vehicle.costPerKm();
			}
		}

		this.OValue = C;
		return C;
	}

	public void nextAction(int index, int value) {
		nextAction[index] = value;
		this.OValue = -1;
	}

	public int nextAction(int index) {
		return nextAction[index];
	}
	
	public void previousAction(int index, int value) {
		previousAction[index] = value;
		this.OValue = -1;
	}

	public int previousAction(int index) {
		return previousAction[index];
	}

	public void setTime(int index, int value) {
		times[index] = value;
		this.OValue = -1;
	}

	public int getTime(int index) {
		return times[index];
	}

	public void setVehicle(int index, int value) {
		vehicles[index] = value;
		this.OValue = -1;
	}

	public int getVehicle(int index) {
		return vehicles[index];
	}

	public void print() {
		int max = 27;

		System.out.println("Objective function value = " + OValue);
		System.out.println("- Nt = " + Nt);

		System.out.println("- Nv = " + Nv);

		int lineReturn = 0;
		System.out.print("- nextAction = [");
		for(int i=0; i<Nt; i++) {
			System.out.print("T"+ i + ":" + nextAction[i] + ", ");
			lineReturn++;
			if(lineReturn%max==0) {
				System.out.println("");
				System.out.print("                       ");
			}
		}
		for(int i=0; i<Nv; i++) {
			if(i==Nv-1) System.out.print("V"+ i + ":" + nextAction[i+Nt]);
			else System.out.print("V"+ i + ":" + nextAction[i+Nt] + ", ");
			lineReturn++;
			if(lineReturn%max==0) {
				System.out.println("");
				System.out.print("                       ");
			}
		}
		System.out.println("]");

		lineReturn = 0;
		System.out.print("- times = [");
		for(int i=0; i<Nt; i++) {
			if(i==Nt-1) System.out.print("T"+ i + ":" + times[i]);
			else System.out.print("T"+ i + ":" + times[i] + ", ");
			lineReturn++;
			if(lineReturn%max==0) {
				System.out.println("");
				System.out.print("                   ");
			}
		}
		System.out.println("]");

		lineReturn = 0;
		System.out.print("- vehicles = [");
		for(int i=0; i<Nt; i++) {
			if(i==Nt-1) System.out.print("T"+ i + ":" + vehicles[i]);
			else System.out.print("T"+ i + ":" + vehicles[i] + ", ");
			lineReturn++;
			if(lineReturn%max==0) {
				System.out.println("");
				System.out.print("                      ");
			}
		}
		System.out.println("]");
	}

	///////////////////////////////
	//          GET-SET          //
	///////////////////////////////

	public int[] getNextAction() {
		return nextAction;
	}


	public void setNextAction(int[] nextAction) {
		this.OValue = -1;
		this.nextAction = nextAction;
	}


	public int[] getTimes() {
		return times;
	}


	public void setTimes(int[] times) {
		this.OValue = -1;
		this.times = times;
	}


	public int[] getVehicles() {
		return vehicles;
	}


	public void setVehicles(int[] vehicles) {
		this.OValue = -1;
		this.vehicles = vehicles;
	}

	public int getNt() {
		return Nt;
	}

	public void setNt(int nt) {
		this.OValue = -1;
		Nt = nt;
	}

	public int getNv() {
		return Nv;
	}

	public void setNv(int nv) {
		this.OValue = -1;
		Nv = nv;
	}


	public int[] getPreviousAction() {
		return previousAction;
	}


	public void setPreviousAction(int[] previousAction) {
		this.previousAction = previousAction;
	}


	public int[] getLoad() {
		return load;
	}


	public void setLoad(int[] load) {
		this.load = load;
	}
	
	
}
